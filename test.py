import cv2
import numpy as np
from paddleocr import PaddleOCR

image_path = "test_img_code.PNG"
image = cv2.imread(image_path)

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å CLAHE (–ª—É—á—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è alpha/beta)
clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
gray = clahe.apply(gray)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é
gray = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                             cv2.THRESH_BINARY, 15, 5)

# –£–±–∏—Ä–∞–µ–º —à—É–º –º–µ—Ç–æ–¥–æ–º NLM
gray = cv2.fastNlMeansDenoising(gray, None, 30, 7, 21)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
processed_image_path = "processed_photo.png"
cv2.imwrite(processed_image_path, gray)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º PaddleOCR —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ (—Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π –∏ –¥—Ä.)
ocr = PaddleOCR(lang="ru|en|de|fr|es|ch")

# –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
results = ocr.ocr(processed_image_path, cls=True)

# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞)
sorted_results = sorted(results[0], key=lambda x: (x[0][0][1], x[0][0][0]))

# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
final_text = "\n".join([res[1][0] for res in sorted_results])

print("üìú –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
print(final_text)
